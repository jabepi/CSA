make: Entering directory '/scratch/nas/1/sca1011/CSA/lab3'
rm -rf cholesky cholesky_seq cholesky_omp cholesky_blocked cholesky_blockseq cholesky_blockseq_omp cholesky_blocked_omp cholesky_blockseq_deps cholesky_blocked_deps *.o *.pe* *.po* *.o* *.e*
make: Leaving directory '/scratch/nas/1/sca1011/CSA/lab3'
make: Entering directory '/scratch/nas/1/sca1011/CSA/lab3'
gcc -Wall -Wimplicit-function-declaration -O3 -std=c99 -march=native -DUSE_MKL -DUSE_DOUBLE -lmkl_core -lmkl_sequential -lmkl_rt -lm -I. -I/scratch/nas/1/Soft/intel_parallel_studio_xe/mkl/include -L. -L/scratch/nas/1/Soft/intel_parallel_studio_xe/mkl/lib/intel64 -Wl,-rpath=/scratch/nas/1/Soft/intel_parallel_studio_xe/mkl/lib/intel64 -fopenmp cholesky_blocked_deps.c -o cholesky_blocked_deps_mkl.o
cholesky_blocked_deps.c: In function ‘check_factorization’:
cholesky_blocked_deps.c:155:71: warning: unused variable ‘RI’ [-Wunused-variable]
  155 |   char NORM = 'I', ALL = 'A', UP = 'U', LO = 'L', TR = 'T', NU = 'N', RI = 'R';
      |                                                                       ^~
cholesky_blocked_deps.c:155:61: warning: unused variable ‘NU’ [-Wunused-variable]
  155 |   char NORM = 'I', ALL = 'A', UP = 'U', LO = 'L', TR = 'T', NU = 'N', RI = 'R';
      |                                                             ^~
cholesky_blocked_deps.c:155:51: warning: unused variable ‘TR’ [-Wunused-variable]
  155 |   char NORM = 'I', ALL = 'A', UP = 'U', LO = 'L', TR = 'T', NU = 'N', RI = 'R';
      |                                                   ^~
cholesky_blocked_deps.c: In function ‘main’:
cholesky_blocked_deps.c:249:9: warning: unused variable ‘result’ [-Wunused-variable]
  249 |   char* result[3] = {"n/a", "sucessful", "UNSUCCESSFUL"};
      |         ^~~~~~
make: Leaving directory '/scratch/nas/1/sca1011/CSA/lab3'
make: Entering directory '/scratch/nas/1/sca1011/CSA/lab3'
gcc -Wall -Wimplicit-function-declaration -O3 -std=c99 -march=native -DUSE_MKL -DUSE_DOUBLE -lmkl_core -lmkl_sequential -lmkl_rt -lm -I. -I/scratch/nas/1/Soft/intel_parallel_studio_xe/mkl/include -L. -L/scratch/nas/1/Soft/intel_parallel_studio_xe/mkl/lib/intel64 -Wl,-rpath=/scratch/nas/1/Soft/intel_parallel_studio_xe/mkl/lib/intel64 -DUSE_MANUAL -fopenmp cholesky_blocked_deps.c -o cholesky_blocked_deps.o
cholesky_blocked_deps.c: In function ‘check_factorization’:
cholesky_blocked_deps.c:155:71: warning: unused variable ‘RI’ [-Wunused-variable]
  155 |   char NORM = 'I', ALL = 'A', UP = 'U', LO = 'L', TR = 'T', NU = 'N', RI = 'R';
      |                                                                       ^~
cholesky_blocked_deps.c:155:61: warning: unused variable ‘NU’ [-Wunused-variable]
  155 |   char NORM = 'I', ALL = 'A', UP = 'U', LO = 'L', TR = 'T', NU = 'N', RI = 'R';
      |                                                             ^~
cholesky_blocked_deps.c:155:51: warning: unused variable ‘TR’ [-Wunused-variable]
  155 |   char NORM = 'I', ALL = 'A', UP = 'U', LO = 'L', TR = 'T', NU = 'N', RI = 'R';
      |                                                   ^~
cholesky_blocked_deps.c: In function ‘main’:
cholesky_blocked_deps.c:331:45: warning: implicit declaration of function ‘omp_get_max_threads’; did you mean ‘mkl_get_max_threads’? [-Wimplicit-function-declaration]
  331 |   printf( "  Number of omp threads:  %d\n", omp_get_max_threads());
      |                                             ^~~~~~~~~~~~~~~~~~~
      |                                             mkl_get_max_threads
cholesky_blocked_deps.c:249:9: warning: unused variable ‘result’ [-Wunused-variable]
  249 |   char* result[3] = {"n/a", "sucessful", "UNSUCCESSFUL"};
      |         ^~~~~~
make: Leaving directory '/scratch/nas/1/sca1011/CSA/lab3'
make: Entering directory '/scratch/nas/1/sca1011/CSA/lab3'
gcc -Wall -Wimplicit-function-declaration -O3 -std=c99 -march=native -DUSE_MKL -DUSE_DOUBLE -lmkl_core -lmkl_sequential -lmkl_rt -lm -I. -I/scratch/nas/1/Soft/intel_parallel_studio_xe/mkl/include -L. -L/scratch/nas/1/Soft/intel_parallel_studio_xe/mkl/lib/intel64 -Wl,-rpath=/scratch/nas/1/Soft/intel_parallel_studio_xe/mkl/lib/intel64 -DUSE_MANUAL -fopenmp cholesky_blocked_deps_optimized.c -o cholesky_blocked_deps_optimized.o
cholesky_blocked_deps_optimized.c: In function ‘check_factorization’:
cholesky_blocked_deps_optimized.c:154:71: warning: unused variable ‘RI’ [-Wunused-variable]
  154 |   char NORM = 'I', ALL = 'A', UP = 'U', LO = 'L', TR = 'T', NU = 'N', RI = 'R';
      |                                                                       ^~
cholesky_blocked_deps_optimized.c:154:61: warning: unused variable ‘NU’ [-Wunused-variable]
  154 |   char NORM = 'I', ALL = 'A', UP = 'U', LO = 'L', TR = 'T', NU = 'N', RI = 'R';
      |                                                             ^~
cholesky_blocked_deps_optimized.c:154:51: warning: unused variable ‘TR’ [-Wunused-variable]
  154 |   char NORM = 'I', ALL = 'A', UP = 'U', LO = 'L', TR = 'T', NU = 'N', RI = 'R';
      |                                                   ^~
cholesky_blocked_deps_optimized.c: In function ‘main’:
cholesky_blocked_deps_optimized.c:330:45: warning: implicit declaration of function ‘omp_get_max_threads’; did you mean ‘mkl_get_max_threads’? [-Wimplicit-function-declaration]
  330 |   printf( "  Number of omp threads:  %d\n", omp_get_max_threads());
      |                                             ^~~~~~~~~~~~~~~~~~~
      |                                             mkl_get_max_threads
cholesky_blocked_deps_optimized.c:248:9: warning: unused variable ‘result’ [-Wunused-variable]
  248 |   char* result[3] = {"n/a", "sucessful", "UNSUCCESSFUL"};
      |         ^~~~~~
make: Leaving directory '/scratch/nas/1/sca1011/CSA/lab3'
Using 4 threads
==================== RESULTS ===================== 
  Benchmark: Cholesky (Tasks)
  Elements type: double
  Performance (flops):  97507622912.000000
  Execution time (secs): 0.234920
  Number of mkl threads:  1
================================================== 
Using 8 threads
==================== RESULTS ===================== 
  Benchmark: Cholesky (Tasks)
  Elements type: double
  Performance (flops):  147582910464.000000
  Execution time (secs): 0.155211
  Number of mkl threads:  1
================================================== 
Using 16 threads
==================== RESULTS ===================== 
  Benchmark: Cholesky (Tasks)
  Elements type: double
  Performance (flops):  64120733696.000000
  Execution time (secs): 0.357240
  Number of mkl threads:  1
================================================== 
Using 20 threads
==================== RESULTS ===================== 
  Benchmark: Cholesky (Tasks)
  Elements type: double
  Performance (flops):  44052471808.000000
  Execution time (secs): 0.519982
  Number of mkl threads:  1
================================================== 
Using 32 threads
==================== RESULTS ===================== 
  Benchmark: Cholesky (Tasks)
  Elements type: double
  Performance (flops):  21320302592.000000
  Execution time (secs): 1.074398
  Number of mkl threads:  1
================================================== 
Using 40 threads
==================== RESULTS ===================== 
  Benchmark: Cholesky (Tasks)
  Elements type: double
  Performance (flops):  18234007552.000000
  Execution time (secs): 1.256251
  Number of mkl threads:  1
================================================== 


Using 4 threads
==================== RESULTS ===================== 
  Benchmark: Cholesky (Tasks)
  Elements type: double
  Performance (flops):  9552084992.000000
  Execution time (secs): 2.398062
  Number of omp threads:  4
================================================== 
Using 8 threads
==================== RESULTS ===================== 
  Benchmark: Cholesky (Tasks)
  Elements type: double
  Performance (flops):  26465339392.000000
  Execution time (secs): 0.865528
  Number of omp threads:  8
================================================== 
Using 16 threads
==================== RESULTS ===================== 
  Benchmark: Cholesky (Tasks)
  Elements type: double
  Performance (flops):  62893985792.000000
  Execution time (secs): 0.364208
  Number of omp threads:  16
================================================== 
Using 20 threads
==================== RESULTS ===================== 
  Benchmark: Cholesky (Tasks)
  Elements type: double
  Performance (flops):  40451825664.000000
  Execution time (secs): 0.566266
  Number of omp threads:  20
================================================== 
Using 32 threads
==================== RESULTS ===================== 
  Benchmark: Cholesky (Tasks)
  Elements type: double
  Performance (flops):  479987957760.000000
  Execution time (secs): 0.047723
  Number of omp threads:  32
================================================== 
Using 40 threads
==================== RESULTS ===================== 
  Benchmark: Cholesky (Tasks)
  Elements type: double
  Performance (flops):  321035075584.000000
  Execution time (secs): 0.071352
  Number of omp threads:  40
================================================== 


Using 4 threads
==================== RESULTS ===================== 
  Benchmark: Cholesky (Tasks)
  Elements type: double
  Performance (flops):  40523530240.000000
  Execution time (secs): 0.565264
  Number of omp threads:  4
================================================== 
Using 8 threads
==================== RESULTS ===================== 
  Benchmark: Cholesky (Tasks)
  Elements type: double
  Performance (flops):  70770696192.000000
  Execution time (secs): 0.323672
  Number of omp threads:  8
================================================== 
Using 16 threads
==================== RESULTS ===================== 
  Benchmark: Cholesky (Tasks)
  Elements type: double
  Performance (flops):  150108078080.000000
  Execution time (secs): 0.152600
  Number of omp threads:  16
================================================== 
Using 20 threads
==================== RESULTS ===================== 
  Benchmark: Cholesky (Tasks)
  Elements type: double
  Performance (flops):  170335109120.000000
  Execution time (secs): 0.134479
  Number of omp threads:  20
================================================== 
Using 32 threads
==================== RESULTS ===================== 
  Benchmark: Cholesky (Tasks)
  Elements type: double
  Performance (flops):  185132924928.000000
  Execution time (secs): 0.123730
  Number of omp threads:  32
================================================== 
Using 40 threads
==================== RESULTS ===================== 
  Benchmark: Cholesky (Tasks)
  Elements type: double
  Performance (flops):  76697550848.000000
  Execution time (secs): 0.298660
  Number of omp threads:  40
================================================== 
